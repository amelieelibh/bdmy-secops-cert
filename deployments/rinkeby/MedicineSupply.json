{
  "address": "0x159c75cF20941826aEF7E58bAAAF1ae5e666eCB4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_medicsBookAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sku",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "quantity",
          "type": "uint16"
        }
      ],
      "name": "BoughtMedicine",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sku",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "EmptyMedicine",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prescriptionId",
          "type": "uint256"
        }
      ],
      "name": "ExpiredPrescription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "HopitalRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "medicAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "MedicAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "medicAddr",
          "type": "address"
        }
      ],
      "name": "MedicRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "NewHospital",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sku",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "price",
          "type": "uint16"
        }
      ],
      "name": "NewMedicine",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "medicAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "patientAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prescriptionId",
          "type": "uint256"
        }
      ],
      "name": "NewPrescription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prescriptionId",
          "type": "uint256"
        }
      ],
      "name": "PrescriptionFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sku",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "quantity",
          "type": "uint16"
        }
      ],
      "name": "SoldMedicine",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_IDLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        }
      ],
      "name": "addHospital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "medicAddr",
          "type": "address"
        }
      ],
      "name": "addMedic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "skus",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint16[]",
          "name": "quantities",
          "type": "uint16[]"
        }
      ],
      "name": "addMedicines",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "patientAddr",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "skus",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint16[]",
          "name": "quantities",
          "type": "uint16[]"
        }
      ],
      "name": "createPrescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prescriptionId",
          "type": "uint256"
        }
      ],
      "name": "fillPrescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        }
      ],
      "name": "getHospital",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            }
          ],
          "internalType": "struct Hospital",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHospitalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prescriptionId",
          "type": "uint256"
        }
      ],
      "name": "getItemsOfPrescription",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "sku",
              "type": "bytes32"
            },
            {
              "internalType": "uint16",
              "name": "quantity",
              "type": "uint16"
            }
          ],
          "internalType": "struct ItemPrescription[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hospitalsList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "medicsBookAddr",
          "type": "address"
        }
      ],
      "name": "initializeMedicineSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "medicines",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "sku",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "price",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "quantity",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "medicsBook",
      "outputs": [
        {
          "internalType": "contract IMedicsBook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "medicsInHospitals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "patientPrescriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prescriptions",
      "outputs": [
        {
          "internalType": "address",
          "name": "medic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hospital",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "internalType": "bytes1",
          "name": "filledStatus",
          "type": "bytes1"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prescriptionsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sku",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "price",
          "type": "uint16"
        }
      ],
      "name": "registerMedicine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hospitalAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "removeHospital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "medicAddr",
          "type": "address"
        }
      ],
      "name": "removeMedic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prescriptionId",
          "type": "uint256"
        }
      ],
      "name": "requestMedicines",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "medicsBookAddr",
          "type": "address"
        }
      ],
      "name": "setMedicsBookAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6062006e6601c50006de453ea2cb213829a151e156d44fe0afb6f9d7e17fa51",
  "receipt": {
    "to": null,
    "from": "0xcaa0a9fB031606f5329376702101304928A84D06",
    "contractAddress": "0x159c75cF20941826aEF7E58bAAAF1ae5e666eCB4",
    "transactionIndex": 201,
    "gasUsed": "2490626",
    "logsBloom": "0x
    "blockHash": "0x533612c81dff1142ad6360453870b77b8ce037cea94d1df871b02f053d2f2240",
    "transactionHash": "0xb6062006e6601c50006de453ea2cb213829a151e156d44fe0afb6f9d7e17fa51",
    "logs": [],
    "blockNumber": 11142094,
    "cumulativeGasUsed": "14146518",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcBc6d5aDa54B059cB2A8Aa40f0d8d4C4034a5012"
  ],
  "numDeployments": 1,
  "solcInputHash": "8106a456f6d29d6660c815e3f4de8f61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_medicsBookAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sku\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"}],\"name\":\"BoughtMedicine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sku\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"EmptyMedicine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prescriptionId\",\"type\":\"uint256\"}],\"name\":\"ExpiredPrescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"HopitalRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"medicAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"MedicAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"medicAddr\",\"type\":\"address\"}],\"name\":\"MedicRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"NewHospital\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sku\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"price\",\"type\":\"uint16\"}],\"name\":\"NewMedicine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"medicAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prescriptionId\",\"type\":\"uint256\"}],\"name\":\"NewPrescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prescriptionId\",\"type\":\"uint256\"}],\"name\":\"PrescriptionFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sku\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"}],\"name\":\"SoldMedicine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_IDLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"addHospital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"medicAddr\",\"type\":\"address\"}],\"name\":\"addMedic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"skus\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint16[]\",\"name\":\"quantities\",\"type\":\"uint16[]\"}],\"name\":\"addMedicines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patientAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"skus\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint16[]\",\"name\":\"quantities\",\"type\":\"uint16[]\"}],\"name\":\"createPrescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prescriptionId\",\"type\":\"uint256\"}],\"name\":\"fillPrescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"}],\"name\":\"getHospital\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"internalType\":\"struct Hospital\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHospitalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prescriptionId\",\"type\":\"uint256\"}],\"name\":\"getItemsOfPrescription\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"sku\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"}],\"internalType\":\"struct ItemPrescription[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hospitalsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"medicsBookAddr\",\"type\":\"address\"}],\"name\":\"initializeMedicineSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"medicines\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sku\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"price\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"medicsBook\",\"outputs\":[{\"internalType\":\"contract IMedicsBook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"medicsInHospitals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"patientPrescriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prescriptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"medic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hospital\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"bytes1\",\"name\":\"filledStatus\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prescriptionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sku\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"price\",\"type\":\"uint16\"}],\"name\":\"registerMedicine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hospitalAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"removeHospital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"medicAddr\",\"type\":\"address\"}],\"name\":\"removeMedic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prescriptionId\",\"type\":\"uint256\"}],\"name\":\"requestMedicines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"medicsBookAddr\",\"type\":\"address\"}],\"name\":\"setMedicsBookAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"medicines(address,bytes32)\":{\"notice\":\"Medicines in Hospital - address of Hospital mapped to medicines by name \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MedicineSupply.sol\":\"MedicineSupply\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/MedicineSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nstruct Medic{\\n    address addr;\\n    string name;\\n    string url;\\n}\\n\\nstruct Medicine{\\n    bytes32 sku;\\n    string name;\\n    uint16 price;\\n    uint16 quantity;\\n}\\n\\nstruct Hospital{\\n    address addr;\\n    string name;\\n    string url;\\n}\\n\\nstruct Prescription{\\n    address medic;\\n    address hospital;\\n    address patient;\\n    ItemPrescription[] items;\\n    /**\\n        0x00 = cancelled\\n        0x01 = pending\\n        0x02 = requested\\n        0x03 = completed\\n        0x05 = expired\\n     */\\n    bytes1 filledStatus;\\n    uint timestamp;\\n}\\n\\nstruct ItemPrescription{\\n    bytes32 sku;\\n    uint16 quantity;\\n}\\n\\ninterface IMedicsBook{\\n    function getMedic(address _medic) external view returns (Medic memory);\\n    function existMedic(address _medic) external view returns (bool);\\n}\\n\\ncontract MedicineSupply is Initializable, PausableUpgradeable, OwnableUpgradeable{\\n\\n    mapping(address => Hospital) hospitals;\\n    address[] public hospitalsList;\\n\\n    mapping(address => mapping(address => bool)) public medicsInHospitals;\\n\\n    /** Medicines in Hospital - address of Hospital mapped to medicines by name */\\n    mapping(address => mapping(bytes32 => Medicine)) public medicines;\\n\\n    IMedicsBook public medicsBook;\\n\\n    uint public prescriptionsCount;\\n    // mapping hospital to medic to patient address to list of prescription ids\\n    mapping(address => mapping(address => mapping(address => uint[]))) public patientPrescriptions;\\n    // mapping prescription id to prescription\\n    mapping(uint => Prescription) public prescriptions;\\n\\n    uint constant public MAX_IDLE = 60 * 60 * 24 * 30; // 30 days\\n\\n\\n    event NewHospital(address indexed hospitalAddr, string name, string url);\\n    event HopitalRemoved(address indexed hospitalAddr, string reason);\\n\\n    event MedicAdded(address indexed hospitalAddr, address indexed medicAddr, string name, string url);\\n    event MedicRemoved(address indexed hospitalAddr, address indexed medicAddr);\\n\\n    event NewMedicine(address indexed hospitalAddr, bytes32 indexed sku, string name, uint16 price);\\n    event BoughtMedicine(address indexed hospitalAddr, bytes32 indexed sku, uint16 quantity);\\n    event SoldMedicine(address indexed hospitalAddr, bytes32 indexed sku, uint16 quantity);\\n    event EmptyMedicine(address indexed hospitalAddr, bytes32 indexed sku, string name);\\n\\n    event NewPrescription(address indexed hospitalAddr, address indexed medicAddr, address indexed patientAddr, uint prescriptionId);\\n    event ExpiredPrescription(address indexed hospitalAddr, uint prescriptionId);\\n    event PrescriptionFilled(address indexed hospitalAddr, uint prescriptionId);\\n\\n    modifier onlyHospital() {\\n        require(hospitals[_msgSender()].addr == _msgSender(), \\\"Only hospital can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyMedic(address _hospital) {\\n        require(medicsInHospitals[_hospital][_msgSender()], \\\"Only medic can call this function\\\");\\n        _;\\n    }\\n\\n    constructor (address _medicsBookAddress) {/* does nothing because is an upgradeable contract */}\\n\\n    function initializeMedicineSupply (address medicsBookAddr) public initializer{\\n        __Ownable_init();\\n        medicsBook = IMedicsBook(medicsBookAddr);\\n        prescriptionsCount = 0;\\n    }\\n\\n    function setMedicsBookAddr(address medicsBookAddr) public {\\n        medicsBook = IMedicsBook(medicsBookAddr);\\n    }\\n\\n    function addHospital(address hospitalAddr, string memory _name, string memory _url) public onlyOwner {\\n        hospitals[hospitalAddr] = Hospital(hospitalAddr, _name, _url);\\n        hospitalsList.push(hospitalAddr);\\n    }\\n\\n    function removeHospital(address hospitalAddr, string memory reason) public onlyOwner {\\n        require(hospitals[hospitalAddr].addr == hospitalAddr, \\\"Hospital does not exist\\\");\\n        delete hospitals[hospitalAddr];\\n        for(uint i = 0; i < hospitalsList.length; i++) {\\n            if(hospitalsList[i] == hospitalAddr) {\\n                hospitalsList[i] = hospitalsList[hospitalsList.length - 1];\\n                delete hospitalsList[hospitalsList.length - 1];\\n                hospitalsList.pop();\\n                break;\\n            }\\n        }\\n        emit HopitalRemoved(hospitalAddr, reason);\\n    }\\n\\n    function getHospitalCount() public view returns (uint) {\\n        return hospitalsList.length;\\n    }\\n\\n    function getHospital(address hospitalAddr) public view returns (Hospital memory) {\\n        return hospitals[hospitalAddr];\\n    }\\n\\n    function addMedic(address medicAddr) public onlyHospital {\\n        require(hospitals[_msgSender()].addr == _msgSender(), \\\"Hospital does not exist\\\");\\n        Medic memory medic = medicsBook.getMedic(medicAddr);\\n        require(medic.addr == medicAddr, \\\"Medic does not exist\\\");\\n        medicsInHospitals[_msgSender()][medicAddr] = true;\\n        emit MedicAdded(_msgSender(), medicAddr, medic.name, medic.url);\\n    }\\n\\n    function removeMedic(address medicAddr) public onlyHospital {\\n        require(hospitals[_msgSender()].addr == _msgSender(), \\\"Hospital does not exist\\\");\\n        require(medicsInHospitals[_msgSender()][medicAddr], \\\"Medic does not exist\\\");\\n        medicsInHospitals[_msgSender()][medicAddr] = false;\\n        emit MedicRemoved(_msgSender(), medicAddr);\\n    }\\n\\n    \\n    function registerMedicine(bytes32 sku, string memory name, uint16 price) public onlyHospital{\\n        require(hospitals[_msgSender()].addr == _msgSender(), \\\"Hospital does not exists\\\");\\n        require(medicines[_msgSender()][sku].sku != sku, \\\"Medicine was already registered\\\");\\n        medicines[_msgSender()][sku] = Medicine(sku, name, price, 0);\\n        emit NewMedicine(_msgSender(), sku, name, price);\\n    }\\n\\n    function addMedicines(bytes32[] memory skus, uint16[] memory quantities) public onlyHospital{\\n        require(hospitals[_msgSender()].addr == _msgSender(), \\\"Hospital does not exists\\\");\\n        require(skus.length > 0, \\\"Nothing to add\\\");\\n        require(skus.length == quantities.length, \\\"skus lenght does not match with qty\\\");\\n        for(uint i = 0; i < skus.length; i++){\\n            _addMedicine(_msgSender(), skus[i], quantities[i]);\\n        }\\n\\n    }\\n\\n    function _addMedicine(address hospitalAddr, bytes32 sku, uint16 quantity) internal {\\n        require(medicines[hospitalAddr][sku].sku == sku, \\\"sku not registered yet\\\");\\n        medicines[hospitalAddr][sku].quantity += quantity;\\n        emit BoughtMedicine(hospitalAddr, sku, quantity);\\n    }\\n\\n    function _subsMedicine(address hospitalAddr, bytes32 sku, uint16 quantity) internal {\\n        require(medicines[hospitalAddr][sku].sku == sku, \\\"sku not registered yet\\\");\\n        medicines[hospitalAddr][sku].quantity -= quantity;\\n        emit SoldMedicine(hospitalAddr, sku, quantity);\\n    }\\n\\n    function createPrescription(address hospitalAddr, address patientAddr, bytes32[] memory skus, uint16[] memory quantities) public onlyMedic(hospitalAddr) {\\n        require(hospitals[hospitalAddr].addr == hospitalAddr, \\\"Hospital does not exist\\\");\\n        require(skus.length > 0, \\\"Nothing to add\\\");\\n        require(skus.length == quantities.length, \\\"skus lenght does not match with qty\\\");\\n        ItemPrescription[] memory items = new ItemPrescription[](skus.length);\\n        for(uint i = 0; i < skus.length; i++){\\n            bytes32 sku = skus[i];\\n            uint16 qty = quantities[i];\\n            require(medicines[hospitalAddr][sku].sku == sku, \\\"sku not registered yet\\\");\\n            // require(medicines[hospitalAddr][sku].quantity >= qty, \\\"Not enough medicine\\\");\\n            items[i] = ItemPrescription(sku, qty);\\n        }\\n        uint prescriptionId = ++prescriptionsCount;\\n        prescriptions[prescriptionId].medic = _msgSender();\\n        prescriptions[prescriptionId].hospital = hospitalAddr;\\n        prescriptions[prescriptionId].patient = patientAddr;\\n        prescriptions[prescriptionId].filledStatus = 0x01;\\n        prescriptions[prescriptionId].timestamp = block.timestamp;\\n        // prescriptions[prescriptionId].items = new ItemPrescription[](items.length);\\n        patientPrescriptions[hospitalAddr][_msgSender()][patientAddr].push(prescriptionId);\\n        for(uint i = 0; i < items.length; i++){\\n            ItemPrescription memory item = items[i];\\n            console.log(\\\"index itemPrescription\\\", i, \\\"prescriptionId\\\", prescriptionId);\\n            // prescriptions[prescriptionId].items[i].sku = item.sku;\\n            // prescriptions[prescriptionId].items[i].quantity = item.quantity;\\n            prescriptions[prescriptionId].items.push(item);\\n            if(medicines[hospitalAddr][item.sku].quantity == 0) {\\n                emit EmptyMedicine(hospitalAddr, item.sku, medicines[hospitalAddr][item.sku].name);\\n            }\\n        }\\n        emit NewPrescription(hospitalAddr, _msgSender(), patientAddr, prescriptionId);\\n    }\\n\\n    function requestMedicines(uint prescriptionId) public {\\n        Prescription storage p = prescriptions[prescriptionId];\\n        require(p.patient == _msgSender(), \\\"Only target patient can request medicines\\\");\\n        require(p.filledStatus == 0x01, \\\"Prescription already requested\\\");\\n        ItemPrescription[] storage items = p.items;\\n        for(uint i = 0; i < items.length; i++){\\n            ItemPrescription storage item = items[i];\\n            // console.log(\\\"item.quantity\\\", item.quantity, medicines[p.hospital][item.sku].quantity);\\n            if(item.quantity == 0) {\\n                emit EmptyMedicine(p.hospital, item.sku, medicines[p.hospital][item.sku].name);\\n            }\\n            require(item.quantity <= medicines[p.hospital][item.sku].quantity, \\\"Not enough medicine at this moment\\\");\\n        }\\n        //30 days after\\n        uint expiresOn = p.timestamp + 60 * 60 * 24 * 30;\\n        if(expiresOn > block.timestamp) {\\n            p.filledStatus = 0x02;\\n        }else{\\n            p.filledStatus = 0x05;\\n            emit ExpiredPrescription(p.hospital, prescriptionId);\\n        }\\n    }\\n\\n    function fillPrescription(uint prescriptionId) public onlyHospital {\\n        address hospitalAddr = prescriptions[prescriptionId].hospital;\\n        require(hospitalAddr == _msgSender(), \\\"Only target hospital can fill prescription\\\");\\n        require(prescriptions[prescriptionId].filledStatus == 0x02, \\\"Prescription is not in requested status\\\");\\n        ItemPrescription[] storage items = prescriptions[prescriptionId].items;\\n        for(uint i = 0; i < items.length; i++){\\n            ItemPrescription storage item = items[i];\\n            if(item.quantity == 0) {\\n                emit EmptyMedicine(hospitalAddr, item.sku, medicines[hospitalAddr][item.sku].name);\\n            }\\n            require(item.quantity <= medicines[hospitalAddr][item.sku].quantity, \\\"Not enough medicine at this moment\\\");\\n            // medicines[hospitalAddr][item.sku].quantity -= item.quantity;\\n            // emit SoldMedicine(hospitalAddr, item.sku, item.quantity);\\n            _subsMedicine(hospitalAddr, item.sku, item.quantity);\\n        }\\n        prescriptions[prescriptionId].filledStatus = 0x03;\\n        emit PrescriptionFilled(hospitalAddr, prescriptionId);\\n    }\\n\\n    function getItemsOfPrescription(uint prescriptionId) public view returns (ItemPrescription[] memory items){\\n        items = prescriptions[prescriptionId].items;\\n    }\\n\\n}\",\"keccak256\":\"0x98004d48166230d730d095a302ad20e514247ffac316c7d1d6139329ff194898\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002c8b38038062002c8b83398101604081905262000034916200003b565b506200006d565b6000602082840312156200004e57600080fd5b81516001600160a01b03811681146200006657600080fd5b9392505050565b612c0e806200007d6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063a1776e67116100de578063cddc927b11610097578063f2fde38b11610071578063f2fde38b1461040d578063f8d46ba114610420578063f9a2a38114610433578063fe45a81d1461046357600080fd5b8063cddc927b146103c7578063d5d5fa77146103da578063e74807cc146103fa57600080fd5b8063a1776e6714610348578063b0397ff81461035b578063b11db9e41461036e578063bc9dc1d914610381578063c49b09b514610394578063ca6d3727146103b457600080fd5b8063715018a61161014b5780637d01dbc2116101255780637d01dbc2146102ea578063828566fc146102fd5780638da5cb5b1461031057806399f564271461033557600080fd5b8063715018a6146102c55780637a886793146102cd5780637b67994f146102d757600080fd5b806305001d81146101935780630db7a33e146101bf57806331dfc91b146101fd57806339aaa6e81461028e5780635c975abb146102a557806369b2aecd146102b0575b600080fd5b6101a66101a1366004612114565b61046b565b6040516101b69493929190612198565b60405180910390f35b6101ed6101cd3660046121cd565b609960209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101b6565b61024b61020b366004612206565b609e60205260009081526040902080546001820154600283015460048401546005909401546001600160a01b0393841694928416939091169160f81b9085565b604080516001600160a01b039687168152948616602086015292909416918301919091526001600160f81b0319166060820152608081019190915260a0016101b6565b610297609c5481565b6040519081526020016101b6565b60335460ff166101ed565b6102c36102be36600461221f565b61052f565b005b6102c3610666565b61029762278d0081565b6102c36102e536600461231f565b61067a565b6102c36102f836600461221f565b610874565b6102c361030b366004612376565b6109a0565b6065546001600160a01b03165b6040516001600160a01b0390911681526020016101b6565b6102c3610343366004612206565b610a7d565b61031d610356366004612206565b610d0e565b6102c361036936600461221f565b610d38565b6102c361037c366004612206565b610efa565b609b5461031d906001600160a01b031681565b6103a76103a236600461221f565b6111ca565b6040516101b691906123ec565b6102976103c2366004612440565b611355565b6102c36103d536600461257d565b6113a0565b6103ed6103e8366004612206565b611895565b6040516101b69190612606565b6102c3610408366004612659565b61191b565b6102c361041b36600461221f565b611a75565b6102c361042e3660046126bd565b611aee565b6102c361044136600461221f565b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b609854610297565b609a6020908152600092835260408084209091529082529020805460018201805491929161049890612703565b80601f01602080910402602001604051908101604052809291908181526020018280546104c490612703565b80156105115780601f106104e657610100808354040283529160200191610511565b820191906000526020600020905b8154815290600101906020018083116104f457829003601f168201915b5050506002909301549192505061ffff808216916201000090041684565b600054610100900460ff161580801561054f5750600054600160ff909116105b806105695750303b158015610569575060005460ff166001145b6105d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156105f4576000805461ff0019166101001790555b6105fc611cf7565b609b80546001600160a01b0319166001600160a01b0384161790556000609c558015610662576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b61066e611d26565b6106786000611d80565b565b336000818152609760205260409020546001600160a01b0316146106b05760405162461bcd60e51b81526004016105c89061273e565b336000818152609760205260409020546001600160a01b0316146107115760405162461bcd60e51b8152602060048201526018602482015277486f73706974616c20646f6573206e6f742065786973747360401b60448201526064016105c8565b336000908152609a6020908152604080832086845290915290205483141561077b5760405162461bcd60e51b815260206004820152601f60248201527f4d65646963696e652077617320616c726561647920726567697374657265640060448201526064016105c8565b60405180608001604052808481526020018381526020018261ffff168152602001600061ffff16815250609a60006107b03390565b6001600160a01b03168152602080820192909252604090810160009081208782528352208251815582820151805191926107f292600185019290910190612030565b5060408201516002909101805460609093015161ffff908116620100000263ffffffff199094169216919091179190911790558261082d3390565b6001600160a01b03167f790784cf0db3edec2a229397dc504f4cdfce4984abe1f1ac934563450a5c01a38484604051610867929190612782565b60405180910390a3505050565b336000818152609760205260409020546001600160a01b0316146108aa5760405162461bcd60e51b81526004016105c89061273e565b336000818152609760205260409020546001600160a01b0316146108e05760405162461bcd60e51b81526004016105c8906127a8565b3360009081526099602090815260408083206001600160a01b038516845290915290205460ff1661094a5760405162461bcd60e51b81526020600482015260146024820152731359591a58c8191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016105c8565b3360008181526099602090815260408083206001600160a01b0386168085529252808320805460ff19169055519092917fb35968fdda9034197de288afbe8a2947dedade83d7dbc0de3e340d4f62ce64dc91a350565b6109a8611d26565b604080516060810182526001600160a01b03858116808352602080840187815284860187905260009283526097825294909120835181546001600160a01b03191693169290921782559251805192939192610a099260018501920190612030565b5060408201518051610a25916002840191602090910190612030565b5050609880546001810182556000919091527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8140180546001600160a01b0319166001600160a01b039590951694909417909355505050565b6000818152609e6020526040902060028101546001600160a01b03163314610af95760405162461bcd60e51b815260206004820152602960248201527f4f6e6c79207461726765742070617469656e742063616e2072657175657374206044820152686d65646963696e657360b81b60648201526084016105c8565b600481015460f81b6001600160f81b031916600160f81b14610b5d5760405162461bcd60e51b815260206004820152601e60248201527f507265736372697074696f6e20616c726561647920726571756573746564000060448201526064016105c8565b6003810160005b8154811015610c79576000828281548110610b8157610b816127df565b60009182526020909120600290910201600181015490915061ffff16610c095780546001808601546001600160a01b03166000818152609a6020908152604080832086845290915290819020905191927fc25dbab8db15573076a68e10f7791bf517e1f359577879b903e5ea34d567486192610c0092909101906127f5565b60405180910390a35b6001808501546001600160a01b03166000908152609a60209081526040808320855484529091529020600201549082015461ffff62010000909204821691161115610c665760405162461bcd60e51b81526004016105c89061289d565b5080610c71816128f5565b915050610b64565b506000826005015462278d00610c8f9190612910565b905042811115610cad5760048301805460ff19166002179055610d08565b60048301805460ff1916600517905560018301546040516001600160a01b03909116907f50c338e4274d24198c33c0c228b9a0091305eacdea40a7e2423afd2688aebe3e90610cff9087815260200190565b60405180910390a25b50505050565b60988181548110610d1e57600080fd5b6000918252602090912001546001600160a01b0316905081565b336000818152609760205260409020546001600160a01b031614610d6e5760405162461bcd60e51b81526004016105c89061273e565b336000818152609760205260409020546001600160a01b031614610da45760405162461bcd60e51b81526004016105c8906127a8565b609b546040516379b28f4f60e01b81526001600160a01b03838116600483015260009216906379b28f4f9060240160006040518083038186803b158015610dea57600080fd5b505afa158015610dfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e269190810190612975565b9050816001600160a01b031681600001516001600160a01b031614610e845760405162461bcd60e51b81526020600482015260146024820152731359591a58c8191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016105c8565b3360008181526099602090815260408083206001600160a01b03871680855290835292819020805460ff19166001179055908401518482015191519293927fd62df3af32c3af5470c71ce8838edebd9516ac5cd2edd07e7b7e8379edb9344492610eee9291612a2f565b60405180910390a35050565b336000818152609760205260409020546001600160a01b031614610f305760405162461bcd60e51b81526004016105c89061273e565b6000818152609e60205260409020600101546001600160a01b0316338114610fad5760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c792074617267657420686f73706974616c2063616e2066696c6c20707260448201526932b9b1b934b83a34b7b760b11b60648201526084016105c8565b6000828152609e602052604090206004015460f81b6001600160f81b031916600160f91b1461102e5760405162461bcd60e51b815260206004820152602760248201527f507265736372697074696f6e206973206e6f7420696e207265717565737465646044820152662073746174757360c81b60648201526084016105c8565b6000828152609e60205260408120600301905b815481101561116357600082828154811061105e5761105e6127df565b60009182526020909120600290910201600181015490915061ffff166110e15780546001600160a01b0385166000818152609a602090815260408083208584529091529081902090517fc25dbab8db15573076a68e10f7791bf517e1f359577879b903e5ea34d5674861916110d8916001909101906127f5565b60405180910390a35b6001600160a01b0384166000908152609a6020908152604080832084548452909152902060020154600182015461ffff6201000090920482169116111561113a5760405162461bcd60e51b81526004016105c89061289d565b8054600182015461115091869161ffff16611dd2565b508061115b816128f5565b915050611041565b506000838152609e602052604090819020600401805460ff19166003179055516001600160a01b038316907f72ad339519151892bec004e5ac7688c5b7cd76c30ccd6ebcd03b6f6562e119bf906111bd9086815260200190565b60405180910390a2505050565b6111f7604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b6001600160a01b03808316600090815260976020908152604091829020825160608101909352805490931682526001830180549293929184019161123a90612703565b80601f016020809104026020016040519081016040528092919081815260200182805461126690612703565b80156112b35780601f10611288576101008083540402835291602001916112b3565b820191906000526020600020905b81548152906001019060200180831161129657829003601f168201915b505050505081526020016002820180546112cc90612703565b80601f01602080910402602001604051908101604052809291908181526020018280546112f890612703565b80156113455780601f1061131a57610100808354040283529160200191611345565b820191906000526020600020905b81548152906001019060200180831161132857829003601f168201915b5050505050815250509050919050565b609d602052836000526040600020602052826000526040600020602052816000526040600020818154811061138957600080fd5b906000526020600020016000935093505050505481565b6001600160a01b0384166000908152609960209081526040808320338452909152902054849060ff1661141f5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206d656469632063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084016105c8565b6001600160a01b03808616600081815260976020526040902054909116146114595760405162461bcd60e51b81526004016105c8906127a8565b600083511161149b5760405162461bcd60e51b815260206004820152600e60248201526d139bdd1a1a5b99c81d1bc818591960921b60448201526064016105c8565b81518351146114bc5760405162461bcd60e51b81526004016105c890612a54565b6000835167ffffffffffffffff8111156114d8576114d8612243565b60405190808252806020026020018201604052801561151d57816020015b60408051808201909152600080825260208201528152602001906001900390816114f65790505b50905060005b84518110156115f9576000858281518110611540576115406127df565b60200260200101519050600085838151811061155e5761155e6127df565b6020908102919091018101516001600160a01b038b166000908152609a83526040808220868352909352919091205490915082146115ae5760405162461bcd60e51b81526004016105c890612a97565b60405180604001604052808381526020018261ffff168152508484815181106115d9576115d96127df565b6020026020010181905250505080806115f1906128f5565b915050611523565b506000609c6000815461160b906128f5565b91829055509050336000828152609e6020908152604080832080546001600160a01b03199081166001600160a01b039687161782556001808301805483168f8916908117909155600284018054909316978e169790971790915560048201805460ff1916909117905542600590910155928252609d905290812090336001600160a01b03908116825260208083019390935260409182016000908120918a16815290835290812080546001810182559082529181209091018290555b82518110156118345760008382815181106116e4576116e46127df565b6020026020010151905061174e6040518060400160405280601681526020017534b73232bc1034ba32b6a83932b9b1b934b83a34b7b760511b815250836040518060400160405280600e81526020016d1c1c995cd8dc9a5c1d1a5bdb925960921b81525086611eb4565b6000838152609e6020908152604080832060030180546001808201835591855283852086516002928302909101908155868501519201805461ffff191661ffff9384161790556001600160a01b038e168552609a84528285208651865290935292200154620100009004166118215780516001600160a01b038a166000818152609a60209081526040808320865184529091529081902090517fc25dbab8db15573076a68e10f7791bf517e1f359577879b903e5ea34d567486191611818916001909101906127f5565b60405180910390a35b508061182c816128f5565b9150506116c7565b506001600160a01b038616336001600160a01b0316886001600160a01b03167f40013f555a2e13179ace541ee0f5903e4f890a16cb874a6c0a51302881a075e78460405161188491815260200190565b60405180910390a450505050505050565b6060609e6000838152602001908152602001600020600301805480602002602001604051908101604052809291908181526020016000905b8282101561191057600084815260209081902060408051808201909152600285029091018054825260019081015461ffff168284015290835290920191016118cd565b505050509050919050565b336000818152609760205260409020546001600160a01b0316146119515760405162461bcd60e51b81526004016105c89061273e565b336000818152609760205260409020546001600160a01b0316146119b25760405162461bcd60e51b8152602060048201526018602482015277486f73706974616c20646f6573206e6f742065786973747360401b60448201526064016105c8565b60008251116119f45760405162461bcd60e51b815260206004820152600e60248201526d139bdd1a1a5b99c81d1bc818591960921b60448201526064016105c8565b8051825114611a155760405162461bcd60e51b81526004016105c890612a54565b60005b8251811015611a7057611a5e33848381518110611a3757611a376127df565b6020026020010151848481518110611a5157611a516127df565b6020026020010151611efd565b80611a68816128f5565b915050611a18565b505050565b611a7d611d26565b6001600160a01b038116611ae25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105c8565b611aeb81611d80565b50565b611af6611d26565b6001600160a01b0380831660008181526097602052604090205490911614611b305760405162461bcd60e51b81526004016105c8906127a8565b6001600160a01b038216600090815260976020526040812080546001600160a01b031916815590611b6460018301826120b4565b611b726002830160006120b4565b505060005b609854811015611cb157826001600160a01b031660988281548110611b9e57611b9e6127df565b6000918252602090912001546001600160a01b03161415611c9f5760988054611bc990600190612ac7565b81548110611bd957611bd96127df565b600091825260209091200154609880546001600160a01b039092169183908110611c0557611c056127df565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560988054611c3e90600190612ac7565b81548110611c4e57611c4e6127df565b600091825260209091200180546001600160a01b03191690556098805480611c7857611c78612ade565b600082815260209020810160001990810180546001600160a01b0319169055019055611cb1565b80611ca9816128f5565b915050611b77565b50816001600160a01b03167f583d4f8aef2b486fcdf45eed851ff69c65cc08a2e42b858bd7f5b38b48d5eaaa82604051611ceb9190612af4565b60405180910390a25050565b600054610100900460ff16611d1e5760405162461bcd60e51b81526004016105c890612b07565b610678611fdf565b6065546001600160a01b031633146106785760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105c8565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0383166000908152609a602090815260408083208584529091529020548214611e145760405162461bcd60e51b81526004016105c890612a97565b6001600160a01b0383166000908152609a60209081526040808320858452909152902060029081018054839290611e5690849062010000900461ffff16612b52565b92506101000a81548161ffff021916908361ffff16021790555081836001600160a01b03167f7b6cf151efb6b6db2874845a2581a75fc543f67d3f568749c9839f6e7abbb8a883604051610867919061ffff91909116815260200190565b610d0884848484604051602401611ece9493929190612b75565b60408051601f198184030181529190526020810180516001600160e01b031663a0c4b22560e01b17905261200f565b6001600160a01b0383166000908152609a602090815260408083208584529091529020548214611f3f5760405162461bcd60e51b81526004016105c890612a97565b6001600160a01b0383166000908152609a60209081526040808320858452909152902060029081018054839290611f8190849062010000900461ffff16612bb2565b92506101000a81548161ffff021916908361ffff16021790555081836001600160a01b03167ff5e6752bcf3f7bd6724327e893eeaf2290c588a7c667f489ba0a1a4d96b92b1583604051610867919061ffff91909116815260200190565b600054610100900460ff166120065760405162461bcd60e51b81526004016105c890612b07565b61067833611d80565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b82805461203c90612703565b90600052602060002090601f01602090048101928261205e57600085556120a4565b82601f1061207757805160ff19168380011785556120a4565b828001600101855582156120a4579182015b828111156120a4578251825591602001919060010190612089565b506120b09291506120ea565b5090565b5080546120c090612703565b6000825580601f106120d0575050565b601f016020900490600052602060002090810190611aeb91905b5b808211156120b057600081556001016120eb565b6001600160a01b0381168114611aeb57600080fd5b6000806040838503121561212757600080fd5b8235612132816120ff565b946020939093013593505050565b60005b8381101561215b578181015183820152602001612143565b83811115610d085750506000910152565b60008151808452612184816020860160208601612140565b601f01601f19169290920160200192915050565b8481526080602082015260006121b1608083018661216c565b61ffff9485166040840152929093166060909101529392505050565b600080604083850312156121e057600080fd5b82356121eb816120ff565b915060208301356121fb816120ff565b809150509250929050565b60006020828403121561221857600080fd5b5035919050565b60006020828403121561223157600080fd5b813561223c816120ff565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561228257612282612243565b604052919050565b600067ffffffffffffffff8211156122a4576122a4612243565b50601f01601f191660200190565b600082601f8301126122c357600080fd5b81356122d66122d18261228a565b612259565b8181528460208386010111156122eb57600080fd5b816020850160208301376000918101602001919091529392505050565b803561ffff8116811461231a57600080fd5b919050565b60008060006060848603121561233457600080fd5b83359250602084013567ffffffffffffffff81111561235257600080fd5b61235e868287016122b2565b92505061236d60408501612308565b90509250925092565b60008060006060848603121561238b57600080fd5b8335612396816120ff565b9250602084013567ffffffffffffffff808211156123b357600080fd5b6123bf878388016122b2565b935060408601359150808211156123d557600080fd5b506123e2868287016122b2565b9150509250925092565b602080825282516001600160a01b0316828201528201516060604083015260009061241a608084018261216c565b90506040840151601f19848303016060850152612437828261216c565b95945050505050565b6000806000806080858703121561245657600080fd5b8435612461816120ff565b93506020850135612471816120ff565b92506040850135612481816120ff565b9396929550929360600135925050565b600067ffffffffffffffff8211156124ab576124ab612243565b5060051b60200190565b600082601f8301126124c657600080fd5b813560206124d66122d183612491565b82815260059290921b840181019181810190868411156124f557600080fd5b8286015b8481101561251057803583529183019183016124f9565b509695505050505050565b600082601f83011261252c57600080fd5b8135602061253c6122d183612491565b82815260059290921b8401810191818101908684111561255b57600080fd5b8286015b848110156125105761257081612308565b835291830191830161255f565b6000806000806080858703121561259357600080fd5b843561259e816120ff565b935060208501356125ae816120ff565b9250604085013567ffffffffffffffff808211156125cb57600080fd5b6125d7888389016124b5565b935060608701359150808211156125ed57600080fd5b506125fa8782880161251b565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b8281101561264c5781518051855286015161ffff16868501529284019290850190600101612623565b5091979650505050505050565b6000806040838503121561266c57600080fd5b823567ffffffffffffffff8082111561268457600080fd5b612690868387016124b5565b935060208501359150808211156126a657600080fd5b506126b38582860161251b565b9150509250929050565b600080604083850312156126d057600080fd5b82356126db816120ff565b9150602083013567ffffffffffffffff8111156126f757600080fd5b6126b3858286016122b2565b600181811c9082168061271757607f821691505b6020821081141561273857634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526024908201527f4f6e6c7920686f73706974616c2063616e2063616c6c20746869732066756e636040820152633a34b7b760e11b606082015260800190565b604081526000612795604083018561216c565b905061ffff831660208301529392505050565b60208082526017908201527f486f73706974616c20646f6573206e6f74206578697374000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208083526000845481600182811c91508083168061281757607f831692505b85831081141561283557634e487b7160e01b85526022600452602485fd5b87860183815260200181801561285257600181146128635761288e565b60ff1986168252878201965061288e565b60008b81526020902060005b868110156128885781548482015290850190890161286f565b83019750505b50949998505050505050505050565b60208082526022908201527f4e6f7420656e6f756768206d65646963696e652061742074686973206d6f6d656040820152611b9d60f21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612909576129096128df565b5060010190565b60008219821115612923576129236128df565b500190565b600082601f83011261293957600080fd5b81516129476122d18261228a565b81815284602083860101111561295c57600080fd5b61296d826020830160208701612140565b949350505050565b60006020828403121561298757600080fd5b815167ffffffffffffffff8082111561299f57600080fd5b90830190606082860312156129b357600080fd5b6040516060810181811083821117156129ce576129ce612243565b60405282516129dc816120ff565b81526020830151828111156129f057600080fd5b6129fc87828601612928565b602083015250604083015182811115612a1457600080fd5b612a2087828601612928565b60408301525095945050505050565b604081526000612a42604083018561216c565b8281036020840152612437818561216c565b60208082526023908201527f736b7573206c656e67687420646f6573206e6f74206d6174636820776974682060408201526271747960e81b606082015260800190565b6020808252601690820152751cdadd481b9bdd081c9959da5cdd195c9959081e595d60521b604082015260600190565b600082821015612ad957612ad96128df565b500390565b634e487b7160e01b600052603160045260246000fd5b60208152600061223c602083018461216c565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600061ffff83811690831681811015612b6d57612b6d6128df565b039392505050565b608081526000612b88608083018761216c565b8560208401528281036040840152612ba0818661216c565b91505082606083015295945050505050565b600061ffff808316818516808303821115612bcf57612bcf6128df565b0194935050505056fea2646970667358221220b556b3f8a27f0b0e84fb196d8a20418f597143d59b1794bae594005bd3a9a5ef64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063a1776e67116100de578063cddc927b11610097578063f2fde38b11610071578063f2fde38b1461040d578063f8d46ba114610420578063f9a2a38114610433578063fe45a81d1461046357600080fd5b8063cddc927b146103c7578063d5d5fa77146103da578063e74807cc146103fa57600080fd5b8063a1776e6714610348578063b0397ff81461035b578063b11db9e41461036e578063bc9dc1d914610381578063c49b09b514610394578063ca6d3727146103b457600080fd5b8063715018a61161014b5780637d01dbc2116101255780637d01dbc2146102ea578063828566fc146102fd5780638da5cb5b1461031057806399f564271461033557600080fd5b8063715018a6146102c55780637a886793146102cd5780637b67994f146102d757600080fd5b806305001d81146101935780630db7a33e146101bf57806331dfc91b146101fd57806339aaa6e81461028e5780635c975abb146102a557806369b2aecd146102b0575b600080fd5b6101a66101a1366004612114565b61046b565b6040516101b69493929190612198565b60405180910390f35b6101ed6101cd3660046121cd565b609960209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101b6565b61024b61020b366004612206565b609e60205260009081526040902080546001820154600283015460048401546005909401546001600160a01b0393841694928416939091169160f81b9085565b604080516001600160a01b039687168152948616602086015292909416918301919091526001600160f81b0319166060820152608081019190915260a0016101b6565b610297609c5481565b6040519081526020016101b6565b60335460ff166101ed565b6102c36102be36600461221f565b61052f565b005b6102c3610666565b61029762278d0081565b6102c36102e536600461231f565b61067a565b6102c36102f836600461221f565b610874565b6102c361030b366004612376565b6109a0565b6065546001600160a01b03165b6040516001600160a01b0390911681526020016101b6565b6102c3610343366004612206565b610a7d565b61031d610356366004612206565b610d0e565b6102c361036936600461221f565b610d38565b6102c361037c366004612206565b610efa565b609b5461031d906001600160a01b031681565b6103a76103a236600461221f565b6111ca565b6040516101b691906123ec565b6102976103c2366004612440565b611355565b6102c36103d536600461257d565b6113a0565b6103ed6103e8366004612206565b611895565b6040516101b69190612606565b6102c3610408366004612659565b61191b565b6102c361041b36600461221f565b611a75565b6102c361042e3660046126bd565b611aee565b6102c361044136600461221f565b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b609854610297565b609a6020908152600092835260408084209091529082529020805460018201805491929161049890612703565b80601f01602080910402602001604051908101604052809291908181526020018280546104c490612703565b80156105115780601f106104e657610100808354040283529160200191610511565b820191906000526020600020905b8154815290600101906020018083116104f457829003601f168201915b5050506002909301549192505061ffff808216916201000090041684565b600054610100900460ff161580801561054f5750600054600160ff909116105b806105695750303b158015610569575060005460ff166001145b6105d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156105f4576000805461ff0019166101001790555b6105fc611cf7565b609b80546001600160a01b0319166001600160a01b0384161790556000609c558015610662576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b61066e611d26565b6106786000611d80565b565b336000818152609760205260409020546001600160a01b0316146106b05760405162461bcd60e51b81526004016105c89061273e565b336000818152609760205260409020546001600160a01b0316146107115760405162461bcd60e51b8152602060048201526018602482015277486f73706974616c20646f6573206e6f742065786973747360401b60448201526064016105c8565b336000908152609a6020908152604080832086845290915290205483141561077b5760405162461bcd60e51b815260206004820152601f60248201527f4d65646963696e652077617320616c726561647920726567697374657265640060448201526064016105c8565b60405180608001604052808481526020018381526020018261ffff168152602001600061ffff16815250609a60006107b03390565b6001600160a01b03168152602080820192909252604090810160009081208782528352208251815582820151805191926107f292600185019290910190612030565b5060408201516002909101805460609093015161ffff908116620100000263ffffffff199094169216919091179190911790558261082d3390565b6001600160a01b03167f790784cf0db3edec2a229397dc504f4cdfce4984abe1f1ac934563450a5c01a38484604051610867929190612782565b60405180910390a3505050565b336000818152609760205260409020546001600160a01b0316146108aa5760405162461bcd60e51b81526004016105c89061273e565b336000818152609760205260409020546001600160a01b0316146108e05760405162461bcd60e51b81526004016105c8906127a8565b3360009081526099602090815260408083206001600160a01b038516845290915290205460ff1661094a5760405162461bcd60e51b81526020600482015260146024820152731359591a58c8191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016105c8565b3360008181526099602090815260408083206001600160a01b0386168085529252808320805460ff19169055519092917fb35968fdda9034197de288afbe8a2947dedade83d7dbc0de3e340d4f62ce64dc91a350565b6109a8611d26565b604080516060810182526001600160a01b03858116808352602080840187815284860187905260009283526097825294909120835181546001600160a01b03191693169290921782559251805192939192610a099260018501920190612030565b5060408201518051610a25916002840191602090910190612030565b5050609880546001810182556000919091527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8140180546001600160a01b0319166001600160a01b039590951694909417909355505050565b6000818152609e6020526040902060028101546001600160a01b03163314610af95760405162461bcd60e51b815260206004820152602960248201527f4f6e6c79207461726765742070617469656e742063616e2072657175657374206044820152686d65646963696e657360b81b60648201526084016105c8565b600481015460f81b6001600160f81b031916600160f81b14610b5d5760405162461bcd60e51b815260206004820152601e60248201527f507265736372697074696f6e20616c726561647920726571756573746564000060448201526064016105c8565b6003810160005b8154811015610c79576000828281548110610b8157610b816127df565b60009182526020909120600290910201600181015490915061ffff16610c095780546001808601546001600160a01b03166000818152609a6020908152604080832086845290915290819020905191927fc25dbab8db15573076a68e10f7791bf517e1f359577879b903e5ea34d567486192610c0092909101906127f5565b60405180910390a35b6001808501546001600160a01b03166000908152609a60209081526040808320855484529091529020600201549082015461ffff62010000909204821691161115610c665760405162461bcd60e51b81526004016105c89061289d565b5080610c71816128f5565b915050610b64565b506000826005015462278d00610c8f9190612910565b905042811115610cad5760048301805460ff19166002179055610d08565b60048301805460ff1916600517905560018301546040516001600160a01b03909116907f50c338e4274d24198c33c0c228b9a0091305eacdea40a7e2423afd2688aebe3e90610cff9087815260200190565b60405180910390a25b50505050565b60988181548110610d1e57600080fd5b6000918252602090912001546001600160a01b0316905081565b336000818152609760205260409020546001600160a01b031614610d6e5760405162461bcd60e51b81526004016105c89061273e565b336000818152609760205260409020546001600160a01b031614610da45760405162461bcd60e51b81526004016105c8906127a8565b609b546040516379b28f4f60e01b81526001600160a01b03838116600483015260009216906379b28f4f9060240160006040518083038186803b158015610dea57600080fd5b505afa158015610dfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e269190810190612975565b9050816001600160a01b031681600001516001600160a01b031614610e845760405162461bcd60e51b81526020600482015260146024820152731359591a58c8191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016105c8565b3360008181526099602090815260408083206001600160a01b03871680855290835292819020805460ff19166001179055908401518482015191519293927fd62df3af32c3af5470c71ce8838edebd9516ac5cd2edd07e7b7e8379edb9344492610eee9291612a2f565b60405180910390a35050565b336000818152609760205260409020546001600160a01b031614610f305760405162461bcd60e51b81526004016105c89061273e565b6000818152609e60205260409020600101546001600160a01b0316338114610fad5760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c792074617267657420686f73706974616c2063616e2066696c6c20707260448201526932b9b1b934b83a34b7b760b11b60648201526084016105c8565b6000828152609e602052604090206004015460f81b6001600160f81b031916600160f91b1461102e5760405162461bcd60e51b815260206004820152602760248201527f507265736372697074696f6e206973206e6f7420696e207265717565737465646044820152662073746174757360c81b60648201526084016105c8565b6000828152609e60205260408120600301905b815481101561116357600082828154811061105e5761105e6127df565b60009182526020909120600290910201600181015490915061ffff166110e15780546001600160a01b0385166000818152609a602090815260408083208584529091529081902090517fc25dbab8db15573076a68e10f7791bf517e1f359577879b903e5ea34d5674861916110d8916001909101906127f5565b60405180910390a35b6001600160a01b0384166000908152609a6020908152604080832084548452909152902060020154600182015461ffff6201000090920482169116111561113a5760405162461bcd60e51b81526004016105c89061289d565b8054600182015461115091869161ffff16611dd2565b508061115b816128f5565b915050611041565b506000838152609e602052604090819020600401805460ff19166003179055516001600160a01b038316907f72ad339519151892bec004e5ac7688c5b7cd76c30ccd6ebcd03b6f6562e119bf906111bd9086815260200190565b60405180910390a2505050565b6111f7604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b6001600160a01b03808316600090815260976020908152604091829020825160608101909352805490931682526001830180549293929184019161123a90612703565b80601f016020809104026020016040519081016040528092919081815260200182805461126690612703565b80156112b35780601f10611288576101008083540402835291602001916112b3565b820191906000526020600020905b81548152906001019060200180831161129657829003601f168201915b505050505081526020016002820180546112cc90612703565b80601f01602080910402602001604051908101604052809291908181526020018280546112f890612703565b80156113455780601f1061131a57610100808354040283529160200191611345565b820191906000526020600020905b81548152906001019060200180831161132857829003601f168201915b5050505050815250509050919050565b609d602052836000526040600020602052826000526040600020602052816000526040600020818154811061138957600080fd5b906000526020600020016000935093505050505481565b6001600160a01b0384166000908152609960209081526040808320338452909152902054849060ff1661141f5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206d656469632063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084016105c8565b6001600160a01b03808616600081815260976020526040902054909116146114595760405162461bcd60e51b81526004016105c8906127a8565b600083511161149b5760405162461bcd60e51b815260206004820152600e60248201526d139bdd1a1a5b99c81d1bc818591960921b60448201526064016105c8565b81518351146114bc5760405162461bcd60e51b81526004016105c890612a54565b6000835167ffffffffffffffff8111156114d8576114d8612243565b60405190808252806020026020018201604052801561151d57816020015b60408051808201909152600080825260208201528152602001906001900390816114f65790505b50905060005b84518110156115f9576000858281518110611540576115406127df565b60200260200101519050600085838151811061155e5761155e6127df565b6020908102919091018101516001600160a01b038b166000908152609a83526040808220868352909352919091205490915082146115ae5760405162461bcd60e51b81526004016105c890612a97565b60405180604001604052808381526020018261ffff168152508484815181106115d9576115d96127df565b6020026020010181905250505080806115f1906128f5565b915050611523565b506000609c6000815461160b906128f5565b91829055509050336000828152609e6020908152604080832080546001600160a01b03199081166001600160a01b039687161782556001808301805483168f8916908117909155600284018054909316978e169790971790915560048201805460ff1916909117905542600590910155928252609d905290812090336001600160a01b03908116825260208083019390935260409182016000908120918a16815290835290812080546001810182559082529181209091018290555b82518110156118345760008382815181106116e4576116e46127df565b6020026020010151905061174e6040518060400160405280601681526020017534b73232bc1034ba32b6a83932b9b1b934b83a34b7b760511b815250836040518060400160405280600e81526020016d1c1c995cd8dc9a5c1d1a5bdb925960921b81525086611eb4565b6000838152609e6020908152604080832060030180546001808201835591855283852086516002928302909101908155868501519201805461ffff191661ffff9384161790556001600160a01b038e168552609a84528285208651865290935292200154620100009004166118215780516001600160a01b038a166000818152609a60209081526040808320865184529091529081902090517fc25dbab8db15573076a68e10f7791bf517e1f359577879b903e5ea34d567486191611818916001909101906127f5565b60405180910390a35b508061182c816128f5565b9150506116c7565b506001600160a01b038616336001600160a01b0316886001600160a01b03167f40013f555a2e13179ace541ee0f5903e4f890a16cb874a6c0a51302881a075e78460405161188491815260200190565b60405180910390a450505050505050565b6060609e6000838152602001908152602001600020600301805480602002602001604051908101604052809291908181526020016000905b8282101561191057600084815260209081902060408051808201909152600285029091018054825260019081015461ffff168284015290835290920191016118cd565b505050509050919050565b336000818152609760205260409020546001600160a01b0316146119515760405162461bcd60e51b81526004016105c89061273e565b336000818152609760205260409020546001600160a01b0316146119b25760405162461bcd60e51b8152602060048201526018602482015277486f73706974616c20646f6573206e6f742065786973747360401b60448201526064016105c8565b60008251116119f45760405162461bcd60e51b815260206004820152600e60248201526d139bdd1a1a5b99c81d1bc818591960921b60448201526064016105c8565b8051825114611a155760405162461bcd60e51b81526004016105c890612a54565b60005b8251811015611a7057611a5e33848381518110611a3757611a376127df565b6020026020010151848481518110611a5157611a516127df565b6020026020010151611efd565b80611a68816128f5565b915050611a18565b505050565b611a7d611d26565b6001600160a01b038116611ae25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105c8565b611aeb81611d80565b50565b611af6611d26565b6001600160a01b0380831660008181526097602052604090205490911614611b305760405162461bcd60e51b81526004016105c8906127a8565b6001600160a01b038216600090815260976020526040812080546001600160a01b031916815590611b6460018301826120b4565b611b726002830160006120b4565b505060005b609854811015611cb157826001600160a01b031660988281548110611b9e57611b9e6127df565b6000918252602090912001546001600160a01b03161415611c9f5760988054611bc990600190612ac7565b81548110611bd957611bd96127df565b600091825260209091200154609880546001600160a01b039092169183908110611c0557611c056127df565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560988054611c3e90600190612ac7565b81548110611c4e57611c4e6127df565b600091825260209091200180546001600160a01b03191690556098805480611c7857611c78612ade565b600082815260209020810160001990810180546001600160a01b0319169055019055611cb1565b80611ca9816128f5565b915050611b77565b50816001600160a01b03167f583d4f8aef2b486fcdf45eed851ff69c65cc08a2e42b858bd7f5b38b48d5eaaa82604051611ceb9190612af4565b60405180910390a25050565b600054610100900460ff16611d1e5760405162461bcd60e51b81526004016105c890612b07565b610678611fdf565b6065546001600160a01b031633146106785760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105c8565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0383166000908152609a602090815260408083208584529091529020548214611e145760405162461bcd60e51b81526004016105c890612a97565b6001600160a01b0383166000908152609a60209081526040808320858452909152902060029081018054839290611e5690849062010000900461ffff16612b52565b92506101000a81548161ffff021916908361ffff16021790555081836001600160a01b03167f7b6cf151efb6b6db2874845a2581a75fc543f67d3f568749c9839f6e7abbb8a883604051610867919061ffff91909116815260200190565b610d0884848484604051602401611ece9493929190612b75565b60408051601f198184030181529190526020810180516001600160e01b031663a0c4b22560e01b17905261200f565b6001600160a01b0383166000908152609a602090815260408083208584529091529020548214611f3f5760405162461bcd60e51b81526004016105c890612a97565b6001600160a01b0383166000908152609a60209081526040808320858452909152902060029081018054839290611f8190849062010000900461ffff16612bb2565b92506101000a81548161ffff021916908361ffff16021790555081836001600160a01b03167ff5e6752bcf3f7bd6724327e893eeaf2290c588a7c667f489ba0a1a4d96b92b1583604051610867919061ffff91909116815260200190565b600054610100900460ff166120065760405162461bcd60e51b81526004016105c890612b07565b61067833611d80565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b82805461203c90612703565b90600052602060002090601f01602090048101928261205e57600085556120a4565b82601f1061207757805160ff19168380011785556120a4565b828001600101855582156120a4579182015b828111156120a4578251825591602001919060010190612089565b506120b09291506120ea565b5090565b5080546120c090612703565b6000825580601f106120d0575050565b601f016020900490600052602060002090810190611aeb91905b5b808211156120b057600081556001016120eb565b6001600160a01b0381168114611aeb57600080fd5b6000806040838503121561212757600080fd5b8235612132816120ff565b946020939093013593505050565b60005b8381101561215b578181015183820152602001612143565b83811115610d085750506000910152565b60008151808452612184816020860160208601612140565b601f01601f19169290920160200192915050565b8481526080602082015260006121b1608083018661216c565b61ffff9485166040840152929093166060909101529392505050565b600080604083850312156121e057600080fd5b82356121eb816120ff565b915060208301356121fb816120ff565b809150509250929050565b60006020828403121561221857600080fd5b5035919050565b60006020828403121561223157600080fd5b813561223c816120ff565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561228257612282612243565b604052919050565b600067ffffffffffffffff8211156122a4576122a4612243565b50601f01601f191660200190565b600082601f8301126122c357600080fd5b81356122d66122d18261228a565b612259565b8181528460208386010111156122eb57600080fd5b816020850160208301376000918101602001919091529392505050565b803561ffff8116811461231a57600080fd5b919050565b60008060006060848603121561233457600080fd5b83359250602084013567ffffffffffffffff81111561235257600080fd5b61235e868287016122b2565b92505061236d60408501612308565b90509250925092565b60008060006060848603121561238b57600080fd5b8335612396816120ff565b9250602084013567ffffffffffffffff808211156123b357600080fd5b6123bf878388016122b2565b935060408601359150808211156123d557600080fd5b506123e2868287016122b2565b9150509250925092565b602080825282516001600160a01b0316828201528201516060604083015260009061241a608084018261216c565b90506040840151601f19848303016060850152612437828261216c565b95945050505050565b6000806000806080858703121561245657600080fd5b8435612461816120ff565b93506020850135612471816120ff565b92506040850135612481816120ff565b9396929550929360600135925050565b600067ffffffffffffffff8211156124ab576124ab612243565b5060051b60200190565b600082601f8301126124c657600080fd5b813560206124d66122d183612491565b82815260059290921b840181019181810190868411156124f557600080fd5b8286015b8481101561251057803583529183019183016124f9565b509695505050505050565b600082601f83011261252c57600080fd5b8135602061253c6122d183612491565b82815260059290921b8401810191818101908684111561255b57600080fd5b8286015b848110156125105761257081612308565b835291830191830161255f565b6000806000806080858703121561259357600080fd5b843561259e816120ff565b935060208501356125ae816120ff565b9250604085013567ffffffffffffffff808211156125cb57600080fd5b6125d7888389016124b5565b935060608701359150808211156125ed57600080fd5b506125fa8782880161251b565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b8281101561264c5781518051855286015161ffff16868501529284019290850190600101612623565b5091979650505050505050565b6000806040838503121561266c57600080fd5b823567ffffffffffffffff8082111561268457600080fd5b612690868387016124b5565b935060208501359150808211156126a657600080fd5b506126b38582860161251b565b9150509250929050565b600080604083850312156126d057600080fd5b82356126db816120ff565b9150602083013567ffffffffffffffff8111156126f757600080fd5b6126b3858286016122b2565b600181811c9082168061271757607f821691505b6020821081141561273857634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526024908201527f4f6e6c7920686f73706974616c2063616e2063616c6c20746869732066756e636040820152633a34b7b760e11b606082015260800190565b604081526000612795604083018561216c565b905061ffff831660208301529392505050565b60208082526017908201527f486f73706974616c20646f6573206e6f74206578697374000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208083526000845481600182811c91508083168061281757607f831692505b85831081141561283557634e487b7160e01b85526022600452602485fd5b87860183815260200181801561285257600181146128635761288e565b60ff1986168252878201965061288e565b60008b81526020902060005b868110156128885781548482015290850190890161286f565b83019750505b50949998505050505050505050565b60208082526022908201527f4e6f7420656e6f756768206d65646963696e652061742074686973206d6f6d656040820152611b9d60f21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612909576129096128df565b5060010190565b60008219821115612923576129236128df565b500190565b600082601f83011261293957600080fd5b81516129476122d18261228a565b81815284602083860101111561295c57600080fd5b61296d826020830160208701612140565b949350505050565b60006020828403121561298757600080fd5b815167ffffffffffffffff8082111561299f57600080fd5b90830190606082860312156129b357600080fd5b6040516060810181811083821117156129ce576129ce612243565b60405282516129dc816120ff565b81526020830151828111156129f057600080fd5b6129fc87828601612928565b602083015250604083015182811115612a1457600080fd5b612a2087828601612928565b60408301525095945050505050565b604081526000612a42604083018561216c565b8281036020840152612437818561216c565b60208082526023908201527f736b7573206c656e67687420646f6573206e6f74206d6174636820776974682060408201526271747960e81b606082015260800190565b6020808252601690820152751cdadd481b9bdd081c9959da5cdd195c9959081e595d60521b604082015260600190565b600082821015612ad957612ad96128df565b500390565b634e487b7160e01b600052603160045260246000fd5b60208152600061223c602083018461216c565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600061ffff83811690831681811015612b6d57612b6d6128df565b039392505050565b608081526000612b88608083018761216c565b8560208401528281036040840152612ba0818661216c565b91505082606083015295945050505050565b600061ffff808316818516808303821115612bcf57612bcf6128df565b0194935050505056fea2646970667358221220b556b3f8a27f0b0e84fb196d8a20418f597143d59b1794bae594005bd3a9a5ef64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "medicines(address,bytes32)": {
        "notice": "Medicines in Hospital - address of Hospital mapped to medicines by name "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 693,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 303,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 408,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 771,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "hospitals",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_struct(Hospital)723_storage)"
      },
      {
        "astId": 774,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "hospitalsList",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 780,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "medicsInHospitals",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 788,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "medicines",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Medicine)716_storage))"
      },
      {
        "astId": 791,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "medicsBook",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IMedicsBook)760"
      },
      {
        "astId": 793,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "prescriptionsCount",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 802,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "patientPrescriptions",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage)))"
      },
      {
        "astId": 807,
        "contract": "contracts/MedicineSupply.sol:MedicineSupply",
        "label": "prescriptions",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_struct(Prescription)739_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ItemPrescription)744_storage)dyn_storage": {
        "base": "t_struct(ItemPrescription)744_storage",
        "encoding": "dynamic_array",
        "label": "struct ItemPrescription[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes1": {
        "encoding": "inplace",
        "label": "bytes1",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMedicsBook)760": {
        "encoding": "inplace",
        "label": "contract IMedicsBook",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => uint256[])))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Medicine)716_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct Medicine))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Medicine)716_storage)"
      },
      "t_mapping(t_address,t_struct(Hospital)723_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Hospital)",
        "numberOfBytes": "32",
        "value": "t_struct(Hospital)723_storage"
      },
      "t_mapping(t_bytes32,t_struct(Medicine)716_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Medicine)",
        "numberOfBytes": "32",
        "value": "t_struct(Medicine)716_storage"
      },
      "t_mapping(t_uint256,t_struct(Prescription)739_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Prescription)",
        "numberOfBytes": "32",
        "value": "t_struct(Prescription)739_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Hospital)723_storage": {
        "encoding": "inplace",
        "label": "struct Hospital",
        "members": [
          {
            "astId": 718,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 720,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 722,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "url",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ItemPrescription)744_storage": {
        "encoding": "inplace",
        "label": "struct ItemPrescription",
        "members": [
          {
            "astId": 741,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "sku",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 743,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "quantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Medicine)716_storage": {
        "encoding": "inplace",
        "label": "struct Medicine",
        "members": [
          {
            "astId": 709,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "sku",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 711,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 713,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 715,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "quantity",
            "offset": 2,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Prescription)739_storage": {
        "encoding": "inplace",
        "label": "struct Prescription",
        "members": [
          {
            "astId": 725,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "medic",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 727,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "hospital",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 729,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "patient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 733,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "items",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(ItemPrescription)744_storage)dyn_storage"
          },
          {
            "astId": 736,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "filledStatus",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes1"
          },
          {
            "astId": 738,
            "contract": "contracts/MedicineSupply.sol:MedicineSupply",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}