/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type HospitalStruct = {
  addr: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  url: PromiseOrValue<string>;
};

export type HospitalStructOutput = [string, string, string] & {
  addr: string;
  name: string;
  url: string;
};

export type ItemPrescriptionStruct = {
  sku: PromiseOrValue<BytesLike>;
  quantity: PromiseOrValue<BigNumberish>;
};

export type ItemPrescriptionStructOutput = [string, number] & {
  sku: string;
  quantity: number;
};

export interface MedicineSupplyInterface extends utils.Interface {
  functions: {
    "MAX_IDLE()": FunctionFragment;
    "addHospital(address,string,string)": FunctionFragment;
    "addMedic(address)": FunctionFragment;
    "addMedicines(bytes32[],uint16[])": FunctionFragment;
    "createPrescription(address,address,bytes32[],uint16[])": FunctionFragment;
    "fillPrescription(uint256)": FunctionFragment;
    "getHospital(address)": FunctionFragment;
    "getHospitalCount()": FunctionFragment;
    "getItemsOfPrescription(uint256)": FunctionFragment;
    "hospitalsList(uint256)": FunctionFragment;
    "initializeMedicineSupply(address)": FunctionFragment;
    "medicines(address,bytes32)": FunctionFragment;
    "medicsBook()": FunctionFragment;
    "medicsInHospitals(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "patientPrescriptions(address,address,address,uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "prescriptions(uint256)": FunctionFragment;
    "prescriptionsCount()": FunctionFragment;
    "registerMedicine(bytes32,string,uint16)": FunctionFragment;
    "removeHospital(address,string)": FunctionFragment;
    "removeMedic(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestMedicines(uint256)": FunctionFragment;
    "setMedicsBookAddr(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_IDLE"
      | "addHospital"
      | "addMedic"
      | "addMedicines"
      | "createPrescription"
      | "fillPrescription"
      | "getHospital"
      | "getHospitalCount"
      | "getItemsOfPrescription"
      | "hospitalsList"
      | "initializeMedicineSupply"
      | "medicines"
      | "medicsBook"
      | "medicsInHospitals"
      | "owner"
      | "patientPrescriptions"
      | "paused"
      | "prescriptions"
      | "prescriptionsCount"
      | "registerMedicine"
      | "removeHospital"
      | "removeMedic"
      | "renounceOwnership"
      | "requestMedicines"
      | "setMedicsBookAddr"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_IDLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addHospital",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMedic",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addMedicines",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createPrescription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPrescription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHospital",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHospitalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItemsOfPrescription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hospitalsList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeMedicineSupply",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "medicines",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "medicsBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "medicsInHospitals",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "patientPrescriptions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prescriptions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "prescriptionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerMedicine",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeHospital",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMedic",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestMedicines",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMedicsBookAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_IDLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addHospital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMedic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMedicines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPrescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPrescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHospital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHospitalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemsOfPrescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hospitalsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeMedicineSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "medicines", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "medicsBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "medicsInHospitals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "patientPrescriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prescriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prescriptionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMedicine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeHospital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMedic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMedicines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMedicsBookAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BoughtMedicine(address,bytes32,uint16)": EventFragment;
    "EmptyMedicine(address,bytes32,string)": EventFragment;
    "ExpiredPrescription(address,uint256)": EventFragment;
    "HopitalRemoved(address,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MedicAdded(address,address,string,string)": EventFragment;
    "MedicRemoved(address,address)": EventFragment;
    "NewHospital(address,string,string)": EventFragment;
    "NewMedicine(address,bytes32,string,uint16)": EventFragment;
    "NewPrescription(address,address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PrescriptionFilled(address,uint256)": EventFragment;
    "SoldMedicine(address,bytes32,uint16)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoughtMedicine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmptyMedicine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpiredPrescription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HopitalRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MedicAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MedicRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHospital"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMedicine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPrescription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrescriptionFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldMedicine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BoughtMedicineEventObject {
  hospitalAddr: string;
  sku: string;
  quantity: number;
}
export type BoughtMedicineEvent = TypedEvent<
  [string, string, number],
  BoughtMedicineEventObject
>;

export type BoughtMedicineEventFilter = TypedEventFilter<BoughtMedicineEvent>;

export interface EmptyMedicineEventObject {
  hospitalAddr: string;
  sku: string;
  name: string;
}
export type EmptyMedicineEvent = TypedEvent<
  [string, string, string],
  EmptyMedicineEventObject
>;

export type EmptyMedicineEventFilter = TypedEventFilter<EmptyMedicineEvent>;

export interface ExpiredPrescriptionEventObject {
  hospitalAddr: string;
  prescriptionId: BigNumber;
}
export type ExpiredPrescriptionEvent = TypedEvent<
  [string, BigNumber],
  ExpiredPrescriptionEventObject
>;

export type ExpiredPrescriptionEventFilter =
  TypedEventFilter<ExpiredPrescriptionEvent>;

export interface HopitalRemovedEventObject {
  hospitalAddr: string;
  reason: string;
}
export type HopitalRemovedEvent = TypedEvent<
  [string, string],
  HopitalRemovedEventObject
>;

export type HopitalRemovedEventFilter = TypedEventFilter<HopitalRemovedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MedicAddedEventObject {
  hospitalAddr: string;
  medicAddr: string;
  name: string;
  url: string;
}
export type MedicAddedEvent = TypedEvent<
  [string, string, string, string],
  MedicAddedEventObject
>;

export type MedicAddedEventFilter = TypedEventFilter<MedicAddedEvent>;

export interface MedicRemovedEventObject {
  hospitalAddr: string;
  medicAddr: string;
}
export type MedicRemovedEvent = TypedEvent<
  [string, string],
  MedicRemovedEventObject
>;

export type MedicRemovedEventFilter = TypedEventFilter<MedicRemovedEvent>;

export interface NewHospitalEventObject {
  hospitalAddr: string;
  name: string;
  url: string;
}
export type NewHospitalEvent = TypedEvent<
  [string, string, string],
  NewHospitalEventObject
>;

export type NewHospitalEventFilter = TypedEventFilter<NewHospitalEvent>;

export interface NewMedicineEventObject {
  hospitalAddr: string;
  sku: string;
  name: string;
  price: number;
}
export type NewMedicineEvent = TypedEvent<
  [string, string, string, number],
  NewMedicineEventObject
>;

export type NewMedicineEventFilter = TypedEventFilter<NewMedicineEvent>;

export interface NewPrescriptionEventObject {
  hospitalAddr: string;
  medicAddr: string;
  patientAddr: string;
  prescriptionId: BigNumber;
}
export type NewPrescriptionEvent = TypedEvent<
  [string, string, string, BigNumber],
  NewPrescriptionEventObject
>;

export type NewPrescriptionEventFilter = TypedEventFilter<NewPrescriptionEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PrescriptionFilledEventObject {
  hospitalAddr: string;
  prescriptionId: BigNumber;
}
export type PrescriptionFilledEvent = TypedEvent<
  [string, BigNumber],
  PrescriptionFilledEventObject
>;

export type PrescriptionFilledEventFilter =
  TypedEventFilter<PrescriptionFilledEvent>;

export interface SoldMedicineEventObject {
  hospitalAddr: string;
  sku: string;
  quantity: number;
}
export type SoldMedicineEvent = TypedEvent<
  [string, string, number],
  SoldMedicineEventObject
>;

export type SoldMedicineEventFilter = TypedEventFilter<SoldMedicineEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface MedicineSupply extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MedicineSupplyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_IDLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addHospital(
      hospitalAddr: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMedic(
      medicAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMedicines(
      skus: PromiseOrValue<BytesLike>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPrescription(
      hospitalAddr: PromiseOrValue<string>,
      patientAddr: PromiseOrValue<string>,
      skus: PromiseOrValue<BytesLike>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillPrescription(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getHospital(
      hospitalAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[HospitalStructOutput]>;

    getHospitalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getItemsOfPrescription(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ItemPrescriptionStructOutput[]] & {
        items: ItemPrescriptionStructOutput[];
      }
    >;

    hospitalsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initializeMedicineSupply(
      medicsBookAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    medicines(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number] & {
        sku: string;
        name: string;
        price: number;
        quantity: number;
      }
    >;

    medicsBook(overrides?: CallOverrides): Promise<[string]>;

    medicsInHospitals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    patientPrescriptions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    prescriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber] & {
        medic: string;
        hospital: string;
        patient: string;
        filledStatus: string;
        timestamp: BigNumber;
      }
    >;

    prescriptionsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerMedicine(
      sku: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeHospital(
      hospitalAddr: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMedic(
      medicAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestMedicines(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMedicsBookAddr(
      medicsBookAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_IDLE(overrides?: CallOverrides): Promise<BigNumber>;

  addHospital(
    hospitalAddr: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _url: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMedic(
    medicAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMedicines(
    skus: PromiseOrValue<BytesLike>[],
    quantities: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPrescription(
    hospitalAddr: PromiseOrValue<string>,
    patientAddr: PromiseOrValue<string>,
    skus: PromiseOrValue<BytesLike>[],
    quantities: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillPrescription(
    prescriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getHospital(
    hospitalAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<HospitalStructOutput>;

  getHospitalCount(overrides?: CallOverrides): Promise<BigNumber>;

  getItemsOfPrescription(
    prescriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ItemPrescriptionStructOutput[]>;

  hospitalsList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  initializeMedicineSupply(
    medicsBookAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  medicines(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number] & {
      sku: string;
      name: string;
      price: number;
      quantity: number;
    }
  >;

  medicsBook(overrides?: CallOverrides): Promise<string>;

  medicsInHospitals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  patientPrescriptions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  prescriptions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber] & {
      medic: string;
      hospital: string;
      patient: string;
      filledStatus: string;
      timestamp: BigNumber;
    }
  >;

  prescriptionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  registerMedicine(
    sku: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeHospital(
    hospitalAddr: PromiseOrValue<string>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMedic(
    medicAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestMedicines(
    prescriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMedicsBookAddr(
    medicsBookAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_IDLE(overrides?: CallOverrides): Promise<BigNumber>;

    addHospital(
      hospitalAddr: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMedic(
      medicAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMedicines(
      skus: PromiseOrValue<BytesLike>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createPrescription(
      hospitalAddr: PromiseOrValue<string>,
      patientAddr: PromiseOrValue<string>,
      skus: PromiseOrValue<BytesLike>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    fillPrescription(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getHospital(
      hospitalAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<HospitalStructOutput>;

    getHospitalCount(overrides?: CallOverrides): Promise<BigNumber>;

    getItemsOfPrescription(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ItemPrescriptionStructOutput[]>;

    hospitalsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initializeMedicineSupply(
      medicsBookAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    medicines(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number] & {
        sku: string;
        name: string;
        price: number;
        quantity: number;
      }
    >;

    medicsBook(overrides?: CallOverrides): Promise<string>;

    medicsInHospitals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    patientPrescriptions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    prescriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber] & {
        medic: string;
        hospital: string;
        patient: string;
        filledStatus: string;
        timestamp: BigNumber;
      }
    >;

    prescriptionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    registerMedicine(
      sku: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeHospital(
      hospitalAddr: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMedic(
      medicAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestMedicines(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMedicsBookAddr(
      medicsBookAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BoughtMedicine(address,bytes32,uint16)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      sku?: PromiseOrValue<BytesLike> | null,
      quantity?: null
    ): BoughtMedicineEventFilter;
    BoughtMedicine(
      hospitalAddr?: PromiseOrValue<string> | null,
      sku?: PromiseOrValue<BytesLike> | null,
      quantity?: null
    ): BoughtMedicineEventFilter;

    "EmptyMedicine(address,bytes32,string)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      sku?: PromiseOrValue<BytesLike> | null,
      name?: null
    ): EmptyMedicineEventFilter;
    EmptyMedicine(
      hospitalAddr?: PromiseOrValue<string> | null,
      sku?: PromiseOrValue<BytesLike> | null,
      name?: null
    ): EmptyMedicineEventFilter;

    "ExpiredPrescription(address,uint256)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      prescriptionId?: null
    ): ExpiredPrescriptionEventFilter;
    ExpiredPrescription(
      hospitalAddr?: PromiseOrValue<string> | null,
      prescriptionId?: null
    ): ExpiredPrescriptionEventFilter;

    "HopitalRemoved(address,string)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      reason?: null
    ): HopitalRemovedEventFilter;
    HopitalRemoved(
      hospitalAddr?: PromiseOrValue<string> | null,
      reason?: null
    ): HopitalRemovedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MedicAdded(address,address,string,string)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      medicAddr?: PromiseOrValue<string> | null,
      name?: null,
      url?: null
    ): MedicAddedEventFilter;
    MedicAdded(
      hospitalAddr?: PromiseOrValue<string> | null,
      medicAddr?: PromiseOrValue<string> | null,
      name?: null,
      url?: null
    ): MedicAddedEventFilter;

    "MedicRemoved(address,address)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      medicAddr?: PromiseOrValue<string> | null
    ): MedicRemovedEventFilter;
    MedicRemoved(
      hospitalAddr?: PromiseOrValue<string> | null,
      medicAddr?: PromiseOrValue<string> | null
    ): MedicRemovedEventFilter;

    "NewHospital(address,string,string)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      name?: null,
      url?: null
    ): NewHospitalEventFilter;
    NewHospital(
      hospitalAddr?: PromiseOrValue<string> | null,
      name?: null,
      url?: null
    ): NewHospitalEventFilter;

    "NewMedicine(address,bytes32,string,uint16)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      sku?: PromiseOrValue<BytesLike> | null,
      name?: null,
      price?: null
    ): NewMedicineEventFilter;
    NewMedicine(
      hospitalAddr?: PromiseOrValue<string> | null,
      sku?: PromiseOrValue<BytesLike> | null,
      name?: null,
      price?: null
    ): NewMedicineEventFilter;

    "NewPrescription(address,address,address,uint256)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      medicAddr?: PromiseOrValue<string> | null,
      patientAddr?: PromiseOrValue<string> | null,
      prescriptionId?: null
    ): NewPrescriptionEventFilter;
    NewPrescription(
      hospitalAddr?: PromiseOrValue<string> | null,
      medicAddr?: PromiseOrValue<string> | null,
      patientAddr?: PromiseOrValue<string> | null,
      prescriptionId?: null
    ): NewPrescriptionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PrescriptionFilled(address,uint256)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      prescriptionId?: null
    ): PrescriptionFilledEventFilter;
    PrescriptionFilled(
      hospitalAddr?: PromiseOrValue<string> | null,
      prescriptionId?: null
    ): PrescriptionFilledEventFilter;

    "SoldMedicine(address,bytes32,uint16)"(
      hospitalAddr?: PromiseOrValue<string> | null,
      sku?: PromiseOrValue<BytesLike> | null,
      quantity?: null
    ): SoldMedicineEventFilter;
    SoldMedicine(
      hospitalAddr?: PromiseOrValue<string> | null,
      sku?: PromiseOrValue<BytesLike> | null,
      quantity?: null
    ): SoldMedicineEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    MAX_IDLE(overrides?: CallOverrides): Promise<BigNumber>;

    addHospital(
      hospitalAddr: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMedic(
      medicAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMedicines(
      skus: PromiseOrValue<BytesLike>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPrescription(
      hospitalAddr: PromiseOrValue<string>,
      patientAddr: PromiseOrValue<string>,
      skus: PromiseOrValue<BytesLike>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillPrescription(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getHospital(
      hospitalAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHospitalCount(overrides?: CallOverrides): Promise<BigNumber>;

    getItemsOfPrescription(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hospitalsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeMedicineSupply(
      medicsBookAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    medicines(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    medicsBook(overrides?: CallOverrides): Promise<BigNumber>;

    medicsInHospitals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    patientPrescriptions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    prescriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prescriptionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    registerMedicine(
      sku: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeHospital(
      hospitalAddr: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMedic(
      medicAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestMedicines(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMedicsBookAddr(
      medicsBookAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_IDLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addHospital(
      hospitalAddr: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMedic(
      medicAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMedicines(
      skus: PromiseOrValue<BytesLike>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPrescription(
      hospitalAddr: PromiseOrValue<string>,
      patientAddr: PromiseOrValue<string>,
      skus: PromiseOrValue<BytesLike>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillPrescription(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getHospital(
      hospitalAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHospitalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getItemsOfPrescription(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hospitalsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeMedicineSupply(
      medicsBookAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    medicines(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    medicsBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    medicsInHospitals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    patientPrescriptions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prescriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prescriptionsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerMedicine(
      sku: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeHospital(
      hospitalAddr: PromiseOrValue<string>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMedic(
      medicAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestMedicines(
      prescriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMedicsBookAddr(
      medicsBookAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
